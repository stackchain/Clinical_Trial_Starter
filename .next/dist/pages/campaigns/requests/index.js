'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _routes = require('../../../routes');

var _Layout = require('../../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _campaign = require('../../../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _RequestRow = require('../../../components/RequestRow');

var _RequestRow2 = _interopRequireDefault(_RequestRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'C:\\Users\\Me\\Desktop\\ClinTrial02\\ClinTrial02\\pages\\campaigns\\requests\\index.js?entry';


var RequestIndex = function (_Component) {
  (0, _inherits3.default)(RequestIndex, _Component);

  function RequestIndex() {
    (0, _classCallCheck3.default)(this, RequestIndex);

    return (0, _possibleConstructorReturn3.default)(this, (RequestIndex.__proto__ || (0, _getPrototypeOf2.default)(RequestIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(RequestIndex, [{
    key: 'renderRows',
    value: function renderRows() {
      var _this2 = this;

      return this.props.requests.map(function (request, index) {
        return _react2.default.createElement(_RequestRow2.default, {
          key: index,
          id: index,
          request: request,
          address: _this2.props.address,
          approversCount: _this2.props.approversCount,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 29
          }
        });
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var Header = _semanticUiReact.Table.Header,
          Row = _semanticUiReact.Table.Row,
          HeaderCell = _semanticUiReact.Table.HeaderCell,
          Body = _semanticUiReact.Table.Body;

      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 44
        }
      }, _react2.default.createElement('div', { 'class': 'ui raised segment', __source: {
          fileName: _jsxFileName,
          lineNumber: 45
        }
      }, _react2.default.createElement('a', { 'class': 'ui red ribbon label', __source: {
          fileName: _jsxFileName,
          lineNumber: 46
        }
      }, 'To ensure proper documentation, the researcher/manager must have the correct address of the recipient'), _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 47
        }
      }, 'Requests'), _react2.default.createElement(_routes.Link, { route: '/campaigns/' + this.props.address + '/requests/new', __source: {
          fileName: _jsxFileName,
          lineNumber: 48
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 49
        }
      }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, floated: 'right', style: { marginBottom: 10 }, __source: {
          fileName: _jsxFileName,
          lineNumber: 50
        }
      }, 'Add Request'))), _react2.default.createElement(_semanticUiReact.Table, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 55
        }
      }, _react2.default.createElement(Header, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 56
        }
      }, _react2.default.createElement(Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 57
        }
      }, _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 58
        }
      }, 'ID'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 59
        }
      }, 'Description'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 60
        }
      }, 'Amount'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 61
        }
      }, 'Recipient'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 62
        }
      }, 'Approval Count'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 63
        }
      }, 'Approve'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 64
        }
      }, 'Finalize'))), _react2.default.createElement(Body, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 67
        }
      }, this.renderRows())), _react2.default.createElement('div', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 69
        }
      }, 'Found ', this.props.requestCount, ' requests.')));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
        var address, campaign, requestCount, approversCount, requests;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                address = props.query.address;
                campaign = (0, _campaign2.default)(address);
                _context.next = 4;
                return campaign.methods.getRequestsCount().call();

              case 4:
                requestCount = _context.sent;
                _context.next = 7;
                return campaign.methods.approversCount().call();

              case 7:
                approversCount = _context.sent;
                _context.next = 10;
                return _promise2.default.all(Array(parseInt(requestCount)).fill().map(function (element, index) {
                  return campaign.methods.requests(index).call();
                }));

              case 10:
                requests = _context.sent;
                return _context.abrupt('return', { address: address, requests: requests, requestCount: requestCount, approversCount: approversCount });

              case 12:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps(_x) {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return RequestIndex;
}(_react.Component);

exports.default = RequestIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUmVxdWVzdEluZGV4IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJSb3dzIiwiX3RoaXMyIiwicHJvcHMiLCJyZXF1ZXN0cyIsIm1hcCIsInJlcXVlc3QiLCJpbmRleCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsImFkZHJlc3MiLCJhcHByb3ZlcnNDb3VudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmVuZGVyIiwiSGVhZGVyIiwiUm93IiwiSGVhZGVyQ2VsbCIsIkJvZHkiLCJyb3V0ZSIsInByaW1hcnkiLCJmbG9hdGVkIiwic3R5bGUiLCJtYXJnaW5Cb3R0b20iLCJyZXF1ZXN0Q291bnQiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJjYW1wYWlnbiIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJxdWVyeSIsIm1ldGhvZHMiLCJnZXRSZXF1ZXN0c0NvdW50IiwiY2FsbCIsInNlbnQiLCJhbGwiLCJBcnJheSIsInBhcnNlSW50IiwiZmlsbCIsImVsZW1lbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIiwiX3giXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBTkEsSUFBSUEsZUFBZSw4RkFBbkI7OztBQVFBLElBQUlDLGVBQWUsVUFBVUMsVUFBVixFQUFzQjtBQUN2QywwQkFBVUQsWUFBVixFQUF3QkMsVUFBeEI7O0FBRUEsV0FBU0QsWUFBVCxHQUF3QjtBQUN0QixrQ0FBZ0IsSUFBaEIsRUFBc0JBLFlBQXRCOztBQUVBLFdBQU8seUNBQTJCLElBQTNCLEVB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