'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _factory = require('../../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'C:\\Users\\Me\\Desktop\\ClinTrial02\\ClinTrial02\\pages\\campaigns\\new.js?entry';


var CampaignNew = function (_Component) {
  (0, _inherits3.default)(CampaignNew, _Component);

  function CampaignNew() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, CampaignNew);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = CampaignNew.__proto__ || (0, _getPrototypeOf2.default)(CampaignNew)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      minimumContribution: '',
      errorMessage: '',
      loading: false
    }, _this.onSubmit = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
        var accounts;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                event.preventDefault();

                _this.setState({ loading: true, errorMessage: '' });

                _context.prev = 2;
                _context.next = 5;
                return _web2.default.eth.getAccounts();

              case 5:
                accounts = _context.sent;
                _context.next = 8;
                return _factory2.default.methods.createCampaign(_this.state.minimumContribution).send({
                  from: accounts[0]
                });

              case 8:

                _routes.Router.pushRoute('/');
                _context.next = 14;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context['catch'](2);

                _this.setState({ errorMessage: _context.t0.message });

              case 14:

                _this.setState({ loading: false });

              case 15:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2, [[2, 11]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(CampaignNew, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 38
        }
      }, _react2.default.createElement('div', { 'class': 'ui raised segment', __source: {
          fileName: _jsxFileName,
          lineNumber: 39
        }
      }, _react2.default.createElement('a', { 'class': 'ui red ribbon label', __source: {
          fileName: _jsxFileName,
          lineNumber: 40
        }
      }, 'The minimum contribution for the clinical trial is 100 Wei. The sponsor is automatically recognized as the approver of the requests'), _react2.default.createElement('div', { 'class': 'ui inverted segment', __source: {
          fileName: _jsxFileName,
          lineNumber: 41
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 42
        }
      }, _react2.default.createElement('i', { 'class': 'folder open icon', __source: {
          fileName: _jsxFileName,
          lineNumber: 42
        }
      }), 'Clinical Trial Proposal'), _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 44
        }
      }, _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 45
        }
      }, _react2.default.createElement('div', { 'class': 'ui top left attached label', __source: {
          fileName: _jsxFileName,
          lineNumber: 46
        }
      }, 'Minimum Contribution'), _react2.default.createElement(_semanticUiReact.Input, {
        label: 'wei',
        labelPosition: 'right',
        value: this.state.minimumContribution,
        onChange: function onChange(event) {
          return _this3.setState({ minimumContribution: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 47
        }
      })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Oops!', content: this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 56
        }
      }), _react2.default.createElement(_semanticUiReact.Button, { loading: this.state.loading, primary: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 57
        }
      }, 'Propose')))));
    }
  }]);

  return CampaignNew;
}(_react.Component);

exports.default = CampaignNew;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25OZXciLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJzdGF0ZSIsIm1pbmltdW1Db250cmlidXRpb24iLCJlcnJvck1lc3NhZ2UiLCJsb2FkaW5nIiwib25TdWJtaXQiLCJfcmVmMiIsIm1hcmsiLCJfY2FsbGVlIiwiZXZlbnQiLCJhY2NvdW50cyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcmV2ZW50RGVmYXVsdCIsInNldFN0YXRlIiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJzZW50IiwibWV0aG9kcyIsImNyZWF0ZUNhbXBhaWduIiwic2VuZCIsImZyb20iLCJwdXNoUm91dGUiLCJ0MCIsIm1lc3NhZ2UiLCJzdG9wIiwiX3giLCJrZXkiLCJ2YWx1ZSIsInJlbmRlciIsIl90aGlzMyIsImNyZWF0ZUVsZW1lbnQiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImVycm9yIiwiRmllbGQiLCJsYWJlbCIsImxhYmVsUG9zaXRpb24iLCJvbkNoYW5nZSIsInRhcmdldCIsImhlYWRlciIsImNvbnRlbnQiLCJwcmltYXJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFOQSxJQUFJQSxlQUFlLGtGQUFuQjs7O0FBUUEsSUFBSUMsY0FBYyxVQUFVQyxVQUFWLEVBQXNCO0FBQ3RDLDBCQUFVRCxXQUFWLEVBQXVCQyxVQUF2Qjs7QUFFQSxXQUFTRCxXQUFULEdB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aUMsT0FBTyxDQUFDLENBQUMsS0FBS3JDLEtBQUwsQ0FBV0UsWUFBL0MsRUFBNkRnQyxVQUFVO0FBQ25FQyxvQkFBVXJELFlBRHlEO0FBRW5Fc0Qsc0JBQVk7QUFGdUQ7QUFBdkUsT0FGRixFQU9FLGdCQUFNSCxhQUFOLENBQ0Usc0JBQUtLLEtBRFAsRUFFRTtBQUNFSixrQkFBVTtBQUNSQyxvQkFBVXJELFlBREY7QUFFUnNELHNCQUFZO0FBRko7QUFEWixPQUZGLEVBUUUsZ0JBQU1ILGFBQU4sQ0FDRSxLQURGLEVBRUUsRUFBRSxTQUFTLDRCQUFYLEVBQXlDQyxVQUFVO0FBQy9DQyxvQkFBVXJELFlBRHFDO0FBRS9Dc0Qsc0JBQVk7QUFGbUM7QUFBbkQsT0FGRixFQU9FLHNCQVBGLENBUkYsRUFpQkUsZ0JBQU1ILGFBQU4seUJBQTJCO0FBQ3pCTSxlQUFPLEtBRGtCO0FBRXpCQyx1QkFBZSxPQUZVO0FBR3pCVixlQUFPLEtBQUs5QixLQUFMLENBQVdDLG1CQUhPO0FBSXpCd0Msa0JBQVUsU0FBU0EsUUFBVCxDQUFrQmpDLEtBQWxCLEVBQXlCO0FBQ2pDLGlCQUFPd0IsT0FBT2hCLFFBQVAsQ0FBZ0IsRUFBRWYscUJBQXFCTyxNQUFNa0MsTUFBTixDQUFhWixLQUFwQyxFQUFoQixDQUFQO0FBQ0QsU0FOd0I7QUFPekJJLGtCQUFVO0FBQ1JDLG9CQUFVckQsWUFERjtBQUVSc0Qsc0JBQVk7QUFGSjtBQVBlLE9BQTNCLENBakJGLENBUEYsRUFxQ0UsZ0JBQU1ILGFBQU4sMkJBQTZCLEVBQUVJLE9BQU8sSUFBVCxFQUFlTSxRQUFRLE9BQXZCLEVBQWdDQyxTQUFTLEtBQUs1QyxLQUFMLENBQVdFLFlBQXBELEVBQWtFZ0MsVUFBVTtBQUNyR0Msb0JBQVVyRCxZQUQyRjtBQUVyR3NELHNCQUFZO0FBRnlGO0FBQTVFLE9BQTdCLENBckNGLEVBMENFLGdCQUFNSCxhQUFOLDBCQUVFLEVBQUU5QixTQUFTLEtBQUtILEtBQUwsQ0FBV0csT0FBdEIsRUFBK0IwQyxTQUFTLElBQXhDLEVBQThDWCxVQUFVO0FBQ3BEQyxvQkFBVXJELFlBRDBDO0FBRXBEc0Qsc0JBQVk7QUFGd0M7QUFBeEQsT0FGRixFQU9FLFNBUEYsQ0ExQ0YsQ0F0QkYsQ0FoQkYsQ0FSSyxDQUFQO0FBcUdEO0FBMUd3QixHQUFELENBQTFCOztBQTZHQSxTQUFPckQsV0FBUDtBQUNELENBckxpQixrQkFBbEI7O2tCQXVMZUEsVyIsImZpbGUiOiJ1bmtub3duIn0=