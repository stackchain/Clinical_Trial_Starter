'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'C:\\Users\\Me\\Desktop\\ClinTrial02\\ClinTrial02\\pages\\index.js?entry';


var CampaignIndex = function (_Component) {
  (0, _inherits3.default)(CampaignIndex, _Component);

  function CampaignIndex() {
    (0, _classCallCheck3.default)(this, CampaignIndex);

    return (0, _possibleConstructorReturn3.default)(this, (CampaignIndex.__proto__ || (0, _getPrototypeOf2.default)(CampaignIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(CampaignIndex, [{
    key: 'renderCampaigns',
    value: function renderCampaigns() {
      var items = this.props.campaigns.map(function (address) {
        return {
          header: address,
          description: _react2.default.createElement(_routes.Link, { route: '/campaigns/' + address, __source: {
              fileName: _jsxFileName,
              lineNumber: 19
            }
          }, _react2.default.createElement('a', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 20
            }
          }, 'View Clinical Trial')),
          fluid: true
        };
      });

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 27
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 32
        }
      }, _react2.default.createElement('div', { 'class': 'ui raised segment', __source: {
          fileName: _jsxFileName,
          lineNumber: 33
        }
      }, _react2.default.createElement('a', { 'class': 'ui red ribbon label', __source: {
          fileName: _jsxFileName,
          lineNumber: 34
        }
      }, 'This is a database of a privately and publicly funded clinical studies conducted by the Researcher/Manager'), _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 35
        }
      }, _react2.default.createElement('i', { 'class': 'folder icon', __source: {
          fileName: _jsxFileName,
          lineNumber: 35
        }
      }), 'Current Clinical Trials'), _react2.default.createElement(_routes.Link, { route: '/campaigns/new', __source: {
          fileName: _jsxFileName,
          lineNumber: 37
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 38
        }
      }, _react2.default.createElement(_semanticUiReact.Button, {
        floated: 'right',
        content: 'Propose Clinical Trial',
        icon: 'add square',
        primary: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 39
        }
      }))), this.renderCampaigns()), _react2.default.createElement('div', { 'class': 'ui raised segment', __source: {
          fileName: _jsxFileName,
          lineNumber: 51
        }
      }, _react2.default.createElement('a', { 'class': 'ui red ribbon label', __source: {
          fileName: _jsxFileName,
          lineNumber: 52
        }
      }, 'This is the personal profile of the Researcher/Manager proposing and conducting these clinical trials'), _react2.default.createElement('div', { 'class': 'ui inverted segment', __source: {
          fileName: _jsxFileName,
          lineNumber: 53
        }
      }, _react2.default.createElement('div', { 'class': 'content', __source: {
          fileName: _jsxFileName,
          lineNumber: 54
        }
      }, _react2.default.createElement('div', { 'class': 'left aligned header', __source: {
          fileName: _jsxFileName,
          lineNumber: 55
        }
      }, 'Profile'), _react2.default.createElement('div', { 'class': 'meta', __source: {
          fileName: _jsxFileName,
          lineNumber: 56
        }
      }, 'Louell L. Sala, MD MBA DPCOM'), _react2.default.createElement('div', { 'class': 'left aligned description', __source: {
          fileName: _jsxFileName,
          lineNumber: 57
        }
      }, _react2.default.createElement('p', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 58
        }
      }, 'Dr. Sala is a physician and Web Developer interested in the application of Technology in the study of Diabetes, HIV/AIDS and Cancer ')), _react2.default.createElement('div', { 'class': 'statistic', __source: {
          fileName: _jsxFileName,
          lineNumber: 61
        }
      }, _react2.default.createElement('div', { 'class': 'value', __source: {
          fileName: _jsxFileName,
          lineNumber: 62
        }
      }, _react2.default.createElement('i', { 'class': 'folder open outline icon', __source: {
          fileName: _jsxFileName,
          lineNumber: 63
        }
      }), '5'), _react2.default.createElement('div', { 'class': 'label', __source: {
          fileName: _jsxFileName,
          lineNumber: 65
        }
      }, 'Peer Reviewed Journals'))), _react2.default.createElement('div', { 'class': 'extra content', __source: {
          fileName: _jsxFileName,
          lineNumber: 69
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 70
        }
      }, _react2.default.createElement('i', { 'class': 'users icon', __source: {
          fileName: _jsxFileName,
          lineNumber: 70
        }
      }), '3 members')))));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var campaigns;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _factory2.default.methods.getDeployedCampaigns().call();

              case 2:
                campaigns = _context.sent;
                return _context.abrupt('return', { campaigns: campaigns });

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps() {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return CampaignIndex;
}(_react.Component);

exports.default = CampaignIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25JbmRleCIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyQ2FtcGFpZ25zIiwiaXRlbXMiLCJwcm9wcyIsImNhbXBhaWducyIsIm1hcCIsImFkZHJlc3MiLCJoZWFkZXIiLCJkZXNjcmlwdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJyb3V0ZSIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiZmx1aWQiLCJHcm91cCIsInJlbmRlciIsImZsb2F0ZWQiLCJjb250ZW50IiwiaWNvbiIsInByaW1hcnkiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwibWV0aG9kcyIsImdldERlcGxveWVkQ2FtcGFpZ25zIiwiY2FsbCIsInNlbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBTEEsSUFBSUEsZUFBZSx5RUFBbkI7OztBQU9BLElBQUlDLGdCQUFnQixVQUFVQyxVQUFWLEVBQXNCO0FBQ3hDLDBCQUFVRCxhQUFWLEVBQXlCQyxVQUF6Qjs7QUFFQSxXQUFTRCxhQUFULEdBQXlCO0FBQ3ZCLGtDQUFnQixJQUFoQixFQUFzQkEsYUFBdEI7O0FBRUEsV0FBTyx5Q0FBMkIsSUFBM0IsRUFBaUMsQ0FBQ0EsY0FBY0UsU0FBZCxJQUEyQiw4QkFBdUJGLGFBQXZCLENBQTVCLEVBQW1FRyxLQUFuRSxDQUF5RSxJQUF6RSxFQUErRUMsU0FBL0UsQ0FBakMsQ0FBUDtBQUNEOztBQUVELDZCQUFhSixhQUFiLEVBQTRCLENB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